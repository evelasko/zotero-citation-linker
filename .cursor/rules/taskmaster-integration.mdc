# Taskmaster Integration for Zotero Plugin Development

## Taskmaster Workflow Integration

### **Before Starting Any Task**
```bash
# ‚úÖ DO: Always check what to work on next
task-master next

# ‚úÖ DO: Set task status when starting
task-master set-status --id=1.1 --status=in-progress

# ‚úÖ DO: Review task details for context
task-master show 1.1
```

### **During Implementation**
```bash
# ‚úÖ DO: Log progress and findings regularly
task-master update-subtask --id=1.1 --prompt="
Successfully set up TypeScript configuration.
- Used target es2017 for Zotero 7 compatibility
- Added zotero-types for proper type definitions
- Configured esbuild for compilation
- Next: Test compilation with basic bootstrap file
"

# ‚úÖ DO: Mark subtasks complete immediately after finishing
task-master set-status --id=1.1 --status=done
```

### **Research Integration**
```bash
# ‚úÖ DO: Use research tool for current best practices
task-master research "What are the latest Zotero 7 plugin development patterns for TypeScript setup?" --save-to 1.1 --tree --files=zotero-date-from-last-modified-master/

# ‚úÖ DO: Document findings in subtask details
task-master update-subtask --id=1.1 --prompt="
Research findings on Zotero 7 TypeScript setup:
- esbuild is preferred over webpack for performance
- zotero-types package provides complete type definitions
- Must use es2017 target for Firefox compatibility
- Source: zotero-date-from-last-modified-master example
"
```

## Task Implementation Pattern

### **Subtask Exploration Workflow**
1. **Read task context**: `task-master show <id>`
2. **Research if needed**: Explore Zotero source code, example plugins
3. **Plan implementation**: Update subtask with detailed plan
4. **Implement**: Write code following documented patterns
5. **Test**: Verify functionality works as expected
6. **Document**: Log what worked, what didn't, lessons learned
7. **Complete**: Mark subtask as done

### **Implementation Logging Template**
```bash
task-master update-subtask --id=<ID> --prompt="
## Implementation Progress: <Brief Description>

### What I implemented:
- <Specific changes made>
- <Files created/modified>

### Key findings:
- <Important discoveries>
- <API patterns that work>
- <Gotchas to avoid>

### References used:
- <Zotero source files consulted>
- <Example plugin patterns followed>

### Next steps:
- <What to do next>
- <Dependencies for future tasks>

### Testing status:
- [ ] Basic functionality works
- [ ] Edge cases handled
- [ ] No console errors
"
```

## Task Dependency Management

### **Update Dependent Tasks**
```bash
# ‚úÖ DO: Update future tasks when discovering new requirements
task-master update --from=5 --prompt="
Based on implementing the context menu (task 2), discovered:
- Need to register menu items in addToWindow/removeFromWindow pattern
- Must use createXULElement for Zotero 7 compatibility
- Context menu integration is simpler than expected
- Server implementation (task 5+) can use standard patterns
"

# ‚úÖ DO: Update specific tasks with new insights
task-master update-task --id=6 --prompt="
Context from earlier implementation:
- HTTP server should use Zotero.Server.Endpoints pattern
- Can leverage existing translation system from task 4
- Error handling patterns established in citation generation
"
```

### **When Implementation Differs from Plan**
```bash
# ‚úÖ DO: Document why approach changed
task-master update-subtask --id=3.2 --prompt="
APPROACH CHANGE: Using Zotero's built-in QuickCopy instead of manual citation generation.

Original plan: Manually format citations using CSL processor
New approach: Use Zotero.QuickCopy.getContentFromItems()

Reasons for change:
- QuickCopy respects user's current citation style
- Handles multiple citation formats automatically  
- More maintainable and consistent with Zotero UX
- Less code to maintain

Impact on future tasks:
- Task 4 (Citation Generation) is simplified
- Task 6 (API endpoint) can use same QuickCopy system
- Testing is easier since using proven Zotero code
"
```

## Reference Management

### **Code Reference Tracking**
```bash
# ‚úÖ DO: Track which Zotero source files you consulted
task-master update-subtask --id=2.1 --prompt="
Consulted Zotero source files for context menu patterns:
- zotero-source/chrome/content/zotero/zoteroPane.js:3577 (buildItemContextMenu)
- zotero-source/chrome/content/zotero/zoteroPane.xhtml:948 (menu structure)
- zotero-make-it-red-main/make-it-red.js:34 (addToWindow pattern)

Key patterns identified:
- Use createXULElement for menu items
- Insert after existing separators for placement
- Store element IDs for cleanup
- addEventListener for command handling
"
```

### **Example Plugin Analysis**
```bash
# ‚úÖ DO: Document patterns from example plugins
task-master update-subtask --id=1.2 --prompt="
Analyzed example plugin structures:

zotero-make-it-red-main/ (Simple):
- Basic manifest.json structure
- JavaScript-based bootstrap
- Direct DOM manipulation
- Good for: Simple UI modifications

zotero-date-from-last-modified-master/ (Advanced):
- TypeScript with esbuild compilation
- Modern async/await patterns
- Proper type safety
- Good for: Complex plugins with build processes

Our plugin should follow the advanced pattern due to:
- HTTP server complexity
- Type safety requirements
- Better maintainability
"
```

## Quality Assurance Integration

### **Testing Task Updates**
```bash
# ‚úÖ DO: Document testing results in subtasks
task-master update-subtask --id=2.3 --prompt="
TESTING RESULTS: Context menu integration

‚úÖ PASSED:
- Menu item appears in context menu
- Command handler triggered correctly
- Works with single item selection
- Works with multiple item selection
- Menu item disabled when no selection

‚ùå ISSUES FOUND:
- Menu item appears for attachments (should be filtered)
- Need to handle group libraries vs personal libraries

üîß FIXES APPLIED:
- Added item.isRegularItem() check
- Added library type detection
- Updated menu visibility logic

VERIFICATION NEEDED:
- Test with group library items
- Test with different item types
- Test with read-only libraries
"
```

### **Performance Considerations**
```bash
# ‚úÖ DO: Note performance implications
task-master update-subtask --id=5.1 --prompt="
HTTP Server Implementation - Performance Notes:

- Using Zotero.Server infrastructure (lightweight)
- Endpoint registration is one-time at startup
- Translation can be slow for complex pages (acceptable)
- No persistent connections or state needed

OPTIMIZATION DECISIONS:
- Skip caching translated items (simplicity over speed)
- Use async/await throughout (non-blocking)
- Validate inputs early (fail fast)
- Minimal JSON response payload

BENCHMARKING:
- Simple webpage translation: ~2-3 seconds
- Academic paper translation: ~5-8 seconds
- These times are acceptable for the use case
"
```

## Integration with External Tools

### **API Documentation Updates**
```bash
# ‚úÖ DO: Document API decisions for future Obsidian plugin
task-master update-subtask --id=6.2 --prompt="
API DESIGN DECISIONS for Obsidian integration:

Endpoint: POST /citation-linker/add-from-url
Request: { 'url': 'https://example.com/paper' }
Response: {
  'status': 'success',
  'citation': '(Author, 2023)',
  'zoteroLink': 'https://api.zotero.org/users/123/items/ABC123',
  'itemKey': 'ABC123'
}

RATIONALE:
- Simple request format (just URL needed)
- Rich response for multiple use cases
- Includes both formatted citation AND API link
- Error responses follow same structure with status: 'error'

OBSIDIAN PLUGIN IMPLICATIONS:
- Can use citation for immediate insertion
- Can store zoteroLink for future reference
- itemKey allows direct Zotero API access
- Simple HTTP POST from Obsidian plugin
"
```

## Workflow Commands Reference

### **Essential Commands During Development**
```bash
# Get current task context
task-master next

# See task details with subtasks
task-master show 1

# Start working on a task
task-master set-status --id=1.1 --status=in-progress

# Log implementation progress
task-master update-subtask --id=1.1 --prompt="Progress update..."

# Complete a subtask
task-master set-status --id=1.1 --status=done

# Research current best practices
task-master research "Zotero plugin TypeScript patterns" --save-to 1.1

# Update future tasks based on new learnings
task-master update --from=5 --prompt="New insights from implementation..."

# See project overview
task-master list --with-subtasks

# Check for next available task
task-master next
```

### **Integration with Git Workflow**
```bash
# ‚úÖ DO: Commit after completing each subtask
git add .
git commit -m "feat: implement TypeScript configuration (subtask 1.1)

- Set up tsconfig.json with es2017 target
- Added zotero-types for type definitions  
- Configured esbuild for compilation
- Verified basic bootstrap compilation works

Refs: task-master subtask 1.1"

# ‚úÖ DO: Reference task numbers in commits for traceability
```

Follow [zotero-development.mdc](mdc:.cursor/rules/zotero-development.mdc) for Zotero-specific implementation patterns.
